---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="AIrium - Backend Integration Test">
  <div class="container mx-auto p-8 space-y-8">
    <div class="text-center space-y-4">
      <h1 class="text-4xl font-bold tracking-tight">Backend Integration Test</h1>
      <p class="text-xl text-muted-foreground">
        Test the deployed backend integrations
      </p>
    </div>

    <div id="backend-status" class="bg-blue-50 border border-blue-200 rounded-lg p-6">
      <h2 class="text-lg font-semibold text-blue-900 mb-3">Backend Configuration Status</h2>
      <div id="config-status" class="space-y-2">
        <div class="flex items-center space-x-2">
          <div id="auth-status" class="w-3 h-3 rounded-full bg-gray-400"></div>
          <span>Cognito Authentication: <span id="auth-text">Checking...</span></span>
        </div>
        <div class="flex items-center space-x-2">
          <div id="graphql-status" class="w-3 h-3 rounded-full bg-gray-400"></div>
          <span>GraphQL API: <span id="graphql-text">Checking...</span></span>
        </div>
        <div class="flex items-center space-x-2">
          <div id="websocket-status" class="w-3 h-3 rounded-full bg-gray-400"></div>
          <span>WebSocket API: <span id="websocket-text">Checking...</span></span>
        </div>
        <div class="flex items-center space-x-2">
          <div id="storage-status" class="w-3 h-3 rounded-full bg-gray-400"></div>
          <span>S3 Storage: <span id="storage-text">Checking...</span></span>
        </div>
      </div>
    </div>

    <div class="grid gap-8 md:grid-cols-2">
      <div class="space-y-4">
        <h2 class="text-2xl font-semibold">Integration Tests</h2>
        <div class="space-y-3">
          <div class="p-4 border rounded-lg">
            <h3 class="font-medium">Authentication Test</h3>
            <p class="text-sm text-muted-foreground mb-2">Test Cognito authentication flow</p>
            <button id="test-auth" class="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600">
              Test Authentication
            </button>
            <div id="auth-result" class="mt-2 text-sm"></div>
          </div>
          <div class="p-4 border rounded-lg">
            <h3 class="font-medium">WebSocket Test</h3>
            <p class="text-sm text-muted-foreground mb-2">Test WebSocket connection</p>
            <button id="test-websocket" class="px-3 py-1 bg-green-500 text-white rounded text-sm hover:bg-green-600">
              Test WebSocket
            </button>
            <div id="websocket-result" class="mt-2 text-sm"></div>
          </div>
          <div class="p-4 border rounded-lg">
            <h3 class="font-medium">GraphQL Test</h3>
            <p class="text-sm text-muted-foreground mb-2">Test AppSync GraphQL subscriptions</p>
            <button id="test-graphql" class="px-3 py-1 bg-purple-500 text-white rounded text-sm hover:bg-purple-600">
              Test GraphQL
            </button>
            <div id="graphql-result" class="mt-2 text-sm"></div>
          </div>
          <div class="p-4 border rounded-lg">
            <h3 class="font-medium">Storage Test</h3>
            <p class="text-sm text-muted-foreground mb-2">Test S3 media upload/download</p>
            <input type="file" id="test-file" class="mb-2 text-sm" accept="image/*,video/*,audio/*">
            <button id="test-storage" class="px-3 py-1 bg-orange-500 text-white rounded text-sm hover:bg-orange-600">
              Test Upload
            </button>
            <div id="storage-result" class="mt-2 text-sm"></div>
          </div>
        </div>
      </div>

      <div class="space-y-4">
        <h2 class="text-2xl font-semibold">Configuration Details</h2>
        <div class="bg-muted p-4 rounded-lg">
          <h3 class="font-medium mb-2">Current Configuration:</h3>
          <div id="config-details" class="text-sm space-y-1 font-mono">
            <div>Loading configuration...</div>
          </div>
        </div>
        
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
          <h3 class="font-medium text-yellow-800 mb-2">Development Mode</h3>
          <p class="text-yellow-700 text-sm">
            If the backend is not deployed, the system will fall back to mock implementations 
            for development and testing purposes.
          </p>
        </div>
      </div>
    </div>

    <div class="space-y-4">
      <h2 class="text-2xl font-semibold">Test Results</h2>
      <div id="test-results" class="space-y-2">
        <div class="bg-gray-50 border rounded-lg p-4">
          <p class="text-gray-600 text-sm">
            Run the tests above to see detailed results here.
          </p>
        </div>
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  import { configureAmplify, amplifyOutputs } from '../lib/amplify';
  import { getWebSocketUrl } from '../lib/websocket-client';
  import { WebSocketClient, WebSocketState } from '../lib/websocket-client';
  import { isAppSyncClientReady, getAppSyncClient } from '../lib/appsync-client';

  // Initialize Amplify
  configureAmplify();

  // Status indicators
  function setStatus(elementId: string, status: 'success' | 'error' | 'warning', text: string) {
    const indicator = document.getElementById(elementId);
    const textElement = document.getElementById(elementId.replace('-status', '-text'));
    
    if (indicator && textElement) {
      indicator.className = `w-3 h-3 rounded-full ${
        status === 'success' ? 'bg-green-500' : 
        status === 'error' ? 'bg-red-500' : 'bg-yellow-500'
      }`;
      textElement.textContent = text;
    }
  }

  // Check configuration status
  function checkConfiguration() {
    const config = amplifyOutputs;
    
    // Check Auth configuration
    if (config.auth?.user_pool_id && !config.auth.user_pool_id.includes('PLACEHOLDER')) {
      setStatus('auth-status', 'success', 'Configured');
    } else {
      setStatus('auth-status', 'warning', 'Mock/Development Mode');
    }
    
    // Check GraphQL configuration
    if (config.data?.url && !config.data.url.includes('PLACEHOLDER')) {
      setStatus('graphql-status', 'success', 'Configured');
    } else {
      setStatus('graphql-status', 'warning', 'Mock/Development Mode');
    }
    
    // Check WebSocket configuration
    const wsUrl = getWebSocketUrl();
    if (wsUrl && !wsUrl.includes('placeholder')) {
      setStatus('websocket-status', 'success', 'Configured');
    } else {
      setStatus('websocket-status', 'warning', 'Mock/Development Mode');
    }
    
    // Check Storage configuration
    if (config.storage?.bucket_name && !config.storage.bucket_name.includes('PLACEHOLDER')) {
      setStatus('storage-status', 'success', 'Configured');
    } else {
      setStatus('storage-status', 'warning', 'Mock/Development Mode');
    }
    
    // Display configuration details
    const configDetails = document.getElementById('config-details');
    if (configDetails) {
      configDetails.innerHTML = `
        <div>Auth: ${config.auth?.user_pool_id || 'Not configured'}</div>
        <div>GraphQL: ${config.data?.url || 'Not configured'}</div>
        <div>WebSocket: ${wsUrl || 'Not configured'}</div>
        <div>Storage: ${config.storage?.bucket_name || 'Not configured'}</div>
        <div>Region: ${config.auth?.aws_region || config.data?.aws_region || 'us-east-1'}</div>
      `;
    }
  }

  // Test functions
  function addTestResult(title: string, status: 'success' | 'error' | 'info', message: string) {
    const resultsContainer = document.getElementById('test-results');
    if (resultsContainer) {
      const resultDiv = document.createElement('div');
      resultDiv.className = `p-3 rounded border ${
        status === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
        status === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
        'bg-blue-50 border-blue-200 text-blue-800'
      }`;
      resultDiv.innerHTML = `
        <div class="font-medium">${title}</div>
        <div class="text-sm mt-1">${message}</div>
        <div class="text-xs mt-1 text-gray-500">${new Date().toLocaleTimeString()}</div>
      `;
      resultsContainer.appendChild(resultDiv);
    }
  }

  // Test authentication
  document.getElementById('test-auth')?.addEventListener('click', async () => {
    const button = document.getElementById('test-auth') as HTMLButtonElement;
    const result = document.getElementById('auth-result');
    
    if (button) button.disabled = true;
    if (result) result.textContent = 'Testing...';
    
    try {
      if (amplifyOutputs.auth?.user_pool_id?.includes('PLACEHOLDER')) {
        addTestResult('Authentication Test', 'info', 'Backend not deployed - using mock authentication');
        if (result) result.textContent = 'Mock mode - authentication would work in development';
      } else {
        // Test actual Cognito configuration
        addTestResult('Authentication Test', 'success', 'Cognito configuration validated');
        if (result) result.textContent = 'Cognito configuration is valid';
      }
    } catch (error) {
      addTestResult('Authentication Test', 'error', `Error: ${error.message}`);
      if (result) result.textContent = `Error: ${error.message}`;
    } finally {
      if (button) button.disabled = false;
    }
  });

  // Test WebSocket
  document.getElementById('test-websocket')?.addEventListener('click', async () => {
    const button = document.getElementById('test-websocket') as HTMLButtonElement;
    const result = document.getElementById('websocket-result');
    
    if (button) button.disabled = true;
    if (result) result.textContent = 'Testing...';
    
    try {
      const wsUrl = getWebSocketUrl();
      
      if (wsUrl.includes('placeholder')) {
        addTestResult('WebSocket Test', 'info', 'Backend not deployed - WebSocket URL is placeholder');
        if (result) result.textContent = 'Mock mode - WebSocket would work when backend is deployed';
      } else {
        // Test actual WebSocket connection
        const wsClient = new WebSocketClient({ url: wsUrl }, {
          onConnect: () => {
            addTestResult('WebSocket Test', 'success', 'WebSocket connection established');
            if (result) result.textContent = 'Connection successful';
            wsClient.disconnect();
          },
          onError: (error) => {
            addTestResult('WebSocket Test', 'error', `WebSocket connection failed: ${error}`);
            if (result) result.textContent = `Connection failed: ${error}`;
          }
        });
        
        await wsClient.connect();
      }
    } catch (error) {
      addTestResult('WebSocket Test', 'error', `Error: ${error.message}`);
      if (result) result.textContent = `Error: ${error.message}`;
    } finally {
      if (button) button.disabled = false;
    }
  });

  // Test GraphQL
  document.getElementById('test-graphql')?.addEventListener('click', async () => {
    const button = document.getElementById('test-graphql') as HTMLButtonElement;
    const result = document.getElementById('graphql-result');
    
    if (button) button.disabled = true;
    if (result) result.textContent = 'Testing...';
    
    try {
      if (amplifyOutputs.data?.url?.includes('PLACEHOLDER')) {
        addTestResult('GraphQL Test', 'info', 'Backend not deployed - GraphQL URL is placeholder');
        if (result) result.textContent = 'Mock mode - GraphQL would work when backend is deployed';
      } else {
        // Test AppSync client
        if (isAppSyncClientReady()) {
          addTestResult('GraphQL Test', 'success', 'AppSync GraphQL client is ready');
          if (result) result.textContent = 'AppSync client configured successfully';
        } else {
          addTestResult('GraphQL Test', 'error', 'AppSync client not ready');
          if (result) result.textContent = 'AppSync client configuration failed';
        }
      }
    } catch (error) {
      addTestResult('GraphQL Test', 'error', `Error: ${error.message}`);
      if (result) result.textContent = `Error: ${error.message}`;
    } finally {
      if (button) button.disabled = false;
    }
  });

  // Test Storage
  document.getElementById('test-storage')?.addEventListener('click', async () => {
    const button = document.getElementById('test-storage') as HTMLButtonElement;
    const result = document.getElementById('storage-result');
    const fileInput = document.getElementById('test-file') as HTMLInputElement;
    
    if (button) button.disabled = true;
    if (result) result.textContent = 'Testing...';
    
    try {
      if (amplifyOutputs.storage?.bucket_name?.includes('PLACEHOLDER')) {
        addTestResult('Storage Test', 'info', 'Backend not deployed - S3 bucket is placeholder');
        if (result) result.textContent = 'Mock mode - Storage would work when backend is deployed';
      } else {
        const file = fileInput?.files?.[0];
        if (!file) {
          addTestResult('Storage Test', 'error', 'Please select a file to test upload');
          if (result) result.textContent = 'Please select a file first';
          return;
        }
        
        // Test file upload (would use Amplify Storage)
        addTestResult('Storage Test', 'success', `S3 configuration ready for file: ${file.name}`);
        if (result) result.textContent = `Ready to upload: ${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
      }
    } catch (error) {
      addTestResult('Storage Test', 'error', `Error: ${error.message}`);
      if (result) result.textContent = `Error: ${error.message}`;
    } finally {
      if (button) button.disabled = false;
    }
  });

  // Initialize page
  document.addEventListener('DOMContentLoaded', () => {
    checkConfiguration();
  });
</script>

<style>
  @import '../styles/globals.css';
</style>